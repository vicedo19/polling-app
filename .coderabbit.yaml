language: en-US

reviews:
  # Enable detailed reviews with context
  profile: "chill"  # Options: "chill", "assertive"

  # Exclude paths from review
  exclude_paths:
    - "node_modules/**"
    - ".next/**"
    - "build/**"
    - "dist/**"
    - "coverage/**"
    - ".cache/**"
    - ".turbo/**"
    - ".venv/**"
    - "vendor/**"
    - "**/*.min.js"
    - "**/*.min.css"
    - "**/package-lock.json"
    - "**/yarn.lock"
    - "**/.env.*"

  # Request changes workflow
  request_changes_workflow: true

  # Auto-reviews for pull requests
  auto_review:
    enabled: true
    drafts: false
    ignore_wip_keywords:
      - "WIP"
      - "wip"
      - "work in progress"
      - "draft"
      - "DO NOT MERGE"
      - "[WIP]"
      - "(WIP)"

  # Review tools configuration
  tools:
    dependency_scanner: true
    secret_scanner: true
    vulnerability_scanner: true
    sast: true      # Static Application Security Testing
    container_scanner: true
    iac_scanner: true

  # Path-based review settings
  path_instructions:
    # Next.js Components - Focus on performance and accessibility
    - path: "app/**/*.tsx"
      instructions: |
        When reviewing Next.js components, pay special attention to:
        - Component composition and hierarchy optimization
        - Proper use of useState, useEffect, useContext, useCallback, useMemo
        - Accessibility modifiers and ARIA attributes
        - Performance implications of complex component hierarchies
        - Proper use of Server and Client Components
        - Memory management and cleanup in useEffect
        - Dark mode and theme support
        - Internationalization and localization
        - Main thread UI updates optimization
        - Component complexity (should not exceed 100-150 lines)
        - XSS prevention in component rendering
        - Content Security Policy compliance
        - Event handler security best practices
        - Secure prop validation and sanitization

    # Server Actions - Focus on security and error handling
    - path: "app/lib/actions/*.ts"
      instructions: |
        When reviewing Server Actions, check for:
        - Input validation and sanitization
        - Proper error handling and type safety
        - Security vulnerabilities
        - Database query optimization
        - Rate limiting implementation
        - Authentication and authorization checks
        - Response data structure
        - Cache invalidation strategy
        - CSRF protection implementation
        - SQL injection prevention
        - Parameter pollution protection
        - Session handling security
        - Secure error messaging
        - API endpoint hardening

    # Database and API - Focus on data integrity
    - path: "lib/supabase/*.ts"
      instructions: |
        When reviewing database and API code:
        - Check for proper error handling
        - Validate database queries
        - Ensure type safety with database operations
        - Verify authentication implementation
        - Check for proper environment variable usage
        - Review security measures
        - Validate connection management
        - Implement query parameterization
        - Check for sensitive data exposure
        - Verify access control patterns
        - Review backup procedures
        - Monitor query performance
        - Validate data encryption
        - Verify Supabase Row Level Security (RLS):
          * Confirm RLS policies are defined and enabled for all tables
          * Validate RLS policy logic matches business rules
          * Check for proper user context in policy definitions
          * Ensure no service_role key exposure in client code
          * Verify policy tests exist in migrations
          * Test common access patterns (read/write/update)
          * Validate multi-tenant data isolation
          * Check for policy regressions in changes
          * Review policy performance impact
          * Ensure consistent policy enforcement across API calls

    # Authentication and Authorization
    - path: "app/(auth)/**/*.tsx"
      instructions: |
        When reviewing authentication code:
        - Verify secure password handling
        - Check for proper session management
        - Check for secure cookie settings
        - Verify HTTPS enforcement
        - Review rate limiting on auth endpoints
        - Check for secure password reset flow
        - Validate JWT handling
        - Monitor for brute force protection
        - Verify MFA implementation:
          * Proper MFA enrollment and setup flows
          * Support for multiple MFA methods (TOTP, SMS, etc.)
          * MFA enforcement policies and bypass controls
          * Secure backup/recovery code handling
          * MFA state in session tokens and JWTs
          * QR code generation security for TOTP
          * Rate limiting on MFA attempts
          * Clear user feedback during MFA process

  # Pre-merge quality checks
  pre_merge_checks:
    - name: security_check
      run: security-scanner --fail-on-critical
      fail_on_error: true
    - name: type_check
      run: tsc --noEmit
      fail_on_error: true
    - name: lint_check
      run: eslint . --max-warnings 0
      fail_on_error: true
    - name: test_coverage
      run: jest --coverage --coverageThreshold='{"global":{"lines":80}}'
      fail_on_error: true

  # AI-powered code metrics
  code_metrics:
    enabled: true
    analyze:
      - cyclomatic_complexity
      - cognitive_complexity
      - maintainability_index
      - code_duplication
      - test_coverage
